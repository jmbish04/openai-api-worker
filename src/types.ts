
import type { ChatCompletion } from 'openai/resources/chat/completions';

// --- Type Definitions ---

// Environment interface is generated by wrangler types
// The Env interface will be available from worker-configuration.d.ts

/**
 * Represents the structure of a chat message in an OpenAI API request.
 */
export interface ChatMessage {
	role: 'system' | 'user' | 'assistant';
	content: string;
}

/**
 * Represents the body of a request to the /v1/chat/completions endpoint.
 */
export interface ChatCompletionRequestBody {
	model?: string;
	messages: ChatMessage[];
	stream?: boolean;
	max_tokens?: number;
	temperature?: number;
	top_p?: number;
	frequency_penalty?: number;
	presence_penalty?: number;
	response_format?: {
		type: 'text' | 'json_object' | 'json_schema';
		schema?: any;
	};
	memory_keyword?: string; // Optional keyword for KV memory isolation
	[key: string]: any; // Allow other parameters
}

/**
 * Represents the body of a request to the legacy /v1/completions endpoint.
 */
export interface CompletionRequestBody {
    model?: string;
    prompt: string;
    max_tokens?: number;
    temperature?: number;
    stream?: boolean;
}


/**
 * Represents a model available from any provider.
 */
export interface ApiModel {
    id: string;
    object: 'model';
    owner: string;
    created?: number;
}

export type Provider = 'cloudflare' | 'openai' | 'gemini';
export type ModelType = 'llama4' | 'llama' | 'openai' | 'gemini' | 'input';

/**
 * Cloudflare AI model information from the core API
 */
export interface CloudflareAIModel {
	id: string;
	source: number;
	name: string;
	description: string;
	task: {
		id: string;
		name: string;
		description: string;
	};
	created_at: string;
	tags: string[];
	properties: Array<{
		property_id: string;
		value: any;
	}>;
}

/**
 * Cloudflare AI models response structure
 */
export interface CloudflareAIModelsResponse {
	providers: Record<string, CloudflareAIModel[]>;
}
